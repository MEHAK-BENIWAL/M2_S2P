#include <iostream>
#include <stdlib.h>
#include <pthread.h>
#include <thread>
#include <time.h>
#include <unistd.h>
#include <string>
using namespace std;

#define NUM_THREADS 8
#define MAX 1000000

pthread_mutex_t mutx; // declare a mutex variable to synchronize threads

int data[MAX];
long global_sum = 0;

void *sum(void *threadid)
{
   long tid;
   long sum = 0;
   tid = (long)threadid;
  
   // Calculate the range of the data array that each thread will work on
   int range = MAX/NUM_THREADS;
   int start = tid * range ;
   int end = start + range ;

   // Compute the local sum of the data array for the given range
   for(int i = start ; i < end ; i++) {
        sum += data[i];
   }

   // Enforce sequential update of the global sum using a mutex lock
   pthread_mutex_lock(&mutx);
   global_sum += sum;
   pthread_mutex_unlock(&mutx);

   // Exit the thread
   pthread_exit(NULL);
}

int main(int argc, char *argv[])
{
    int cores = std::thread::hardware_concurrency();
    pthread_mutex_init(&mutx, NULL); // Initialize the mutex variable

    cout<<" the number of cores on this machine = "<<cores<<endl;

   // Generate random numbers and store them in the data array
   for(int i = 0; i < MAX; i++) {
       data[i] = rand() % 20;
   }

   // Create and launch threads to compute the sum of the data array
   pthread_t threads[NUM_THREADS];
   long tid = 0;

   for(tid = 0; tid < NUM_THREADS; tid++) {
       pthread_create(&threads[tid], NULL, sum, (void *)tid);
   }

   // Wait for all threads to finish
   for(tid = 0; tid < NUM_THREADS; tid++) {
       pthread_join(threads[tid], NULL);
   }

   // Print the final sum of the data array
   cout<<"the final sum ="<<global_sum<<endl;
}
